{
  "testCases": [
    {
      "id": "app-load-basic",
      "name": "Basic Application Load Test",
      "category": "smoke",
      "priority": "critical",
      "description": "Test that the basic React application loads without errors",
      "steps": [
        "Navigate to the application URL",
        "Wait for the page to load completely",
        "Verify the main heading 'Vite + React' is visible",
        "Verify no console errors are present"
      ],
      "expectedOutcome": "Application loads successfully with Vite + React heading displayed",
      "selectors": {
        "mainHeading": "h1:contains('Vite + React')",
        "container": ".container.mx-auto"
      }
    },
    {
      "id": "error-boundary-functionality",
      "name": "Error Boundary Test",
      "category": "error-handling",
      "priority": "high",
      "description": "Test that error boundary catches and displays errors properly",
      "steps": [
        "Navigate to the application",
        "Trigger a JavaScript error in a component",
        "Verify error boundary catches the error",
        "Verify fallback UI is displayed"
      ],
      "expectedOutcome": "Error boundary displays fallback UI when errors occur",
      "selectors": {
        "errorBoundary": "[data-testid='error-boundary']",
        "errorMessage": ".error-message"
      }
    },
    {
      "id": "network-handler-retry",
      "name": "Network Handler Retry Logic Test",
      "category": "network",
      "priority": "high",
      "description": "Test network handler retry functionality for failed requests",
      "steps": [
        "Mock a network request that fails initially",
        "Trigger the network request through the application",
        "Verify the request is retried according to retry logic",
        "Verify eventual success or proper error handling"
      ],
      "expectedOutcome": "Network requests are retried on failure with proper error handling",
      "selectors": {
        "networkStatus": "[data-testid='network-status']",
        "retryIndicator": "[data-testid='retry-indicator']"
      }
    },
    {
      "id": "ui-components-render",
      "name": "UI Components Rendering Test",
      "category": "ui-components",
      "priority": "medium",
      "description": "Test that UI components from the library render correctly",
      "steps": [
        "Navigate to a page with UI components",
        "Verify button components render with correct styling",
        "Verify input components are functional",
        "Verify dialog components can be opened and closed"
      ],
      "expectedOutcome": "All UI components render correctly with proper styling and functionality",
      "selectors": {
        "button": "[data-testid='ui-button']",
        "input": "[data-testid='ui-input']",
        "dialog": "[data-testid='ui-dialog']"
      }
    },
    {
      "id": "toast-notification-system",
      "name": "Toast Notification System Test",
      "category": "notifications",
      "priority": "medium",
      "description": "Test toast notification system functionality",
      "steps": [
        "Trigger a toast notification",
        "Verify toast appears with correct message",
        "Verify toast auto-dismisses after timeout",
        "Test multiple toast notifications"
      ],
      "expectedOutcome": "Toast notifications display correctly and dismiss properly",
      "selectors": {
        "toastContainer": "[data-testid='toast-container']",
        "toastMessage": "[data-testid='toast-message']",
        "toastDismiss": "[data-testid='toast-dismiss']"
      }
    },
    {
      "id": "responsive-design",
      "name": "Responsive Design Test",
      "category": "responsive",
      "priority": "medium",
      "description": "Test application responsiveness across different screen sizes",
      "steps": [
        "Load application on desktop viewport",
        "Verify layout is correct for desktop",
        "Resize to tablet viewport",
        "Verify layout adapts correctly",
        "Resize to mobile viewport",
        "Verify mobile layout is functional"
      ],
      "expectedOutcome": "Application layout adapts correctly to different screen sizes",
      "selectors": {
        "mainContainer": ".container.mx-auto.w-full.xl\\:w-\\[60vw\\]",
        "responsiveElement": "[data-testid='responsive-element']"
      }
    },
    {
      "id": "theme-switching",
      "name": "Theme Switching Test",
      "category": "theming",
      "priority": "low",
      "description": "Test dark/light theme switching functionality if available",
      "steps": [
        "Navigate to the application",
        "Locate theme toggle if present",
        "Switch between light and dark themes",
        "Verify theme changes are applied correctly"
      ],
      "expectedOutcome": "Theme switching works correctly with proper visual changes",
      "selectors": {
        "themeToggle": "[data-testid='theme-toggle']",
        "themeIndicator": "[data-theme]"
      }
    },
    {
      "id": "api-endpoint-health",
      "name": "API Endpoint Health Check",
      "category": "api",
      "priority": "critical",
      "description": "Test that API endpoints are accessible and responding",
      "steps": [
        "Make a request to the root endpoint '/'",
        "Verify response status is 200",
        "Verify response contains expected content",
        "Test catch-all route functionality"
      ],
      "expectedOutcome": "API endpoints respond correctly with expected status codes",
      "selectors": {
        "apiResponse": "[data-testid='api-response']",
        "healthStatus": "[data-testid='health-status']"
      }
    }
  ]
}